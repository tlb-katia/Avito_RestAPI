// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Tender Management API
 *
 * API для управления тендерами и предложениями.   Основные функции API включают управление тендерами (создание, изменение, получение списка) и управление предложениями (создание, изменение, получение списка).
 *
 * API version: 1.0
 */

package openapi

import (
	"fmt"
	"github.com/google/uuid"
)

type CreateBidRequest struct {

	// Полное название предложения
	Name string `json:"name"`

	// Описание предложения
	Description string `json:"description"`

	// Уникальный идентификатор тендера, присвоенный сервером.
	TenderId string `json:"tenderId"`

	AuthorType BidAuthorType `json:"authorType"`

	// Уникальный идентификатор автора предложения, присвоенный сервером.
	AuthorId string `json:"authorId"`
}

// AssertCreateBidRequestRequired checks if the required fields are not zero-ed
func AssertCreateBidRequestRequired(obj CreateBidRequest) error {
	elements := map[string]interface{}{
		"name":        obj.Name,
		"description": obj.Description,
		"tenderId":    obj.TenderId,
		"authorType":  obj.AuthorType,
		"authorId":    obj.AuthorId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCreateBidRequestConstraints checks if the values respects the defined constraints
func AssertCreateBidRequestConstraints(obj CreateBidRequest) error {
	if len(obj.Name) > 100 {
		return fmt.Errorf("name exceeds the maximum length of 100 characters")
	}
	if len(obj.Description) > 500 {
		return fmt.Errorf("description exceeds the maximum length of 500 characters")
	}
	if _, err := uuid.Parse(obj.TenderId); err != nil {
		return fmt.Errorf("invalid tenderId: must be a valid UUID")
	}
	validAuthorTypes := map[string]bool{
		"Organization": true,
		"User":         true,
	}

	if !validAuthorTypes[obj.AuthorType.String()] {
		return fmt.Errorf("invalid authorType: must be one of 'Organization' or 'User'")
	}

	if _, err := uuid.Parse(obj.AuthorId); err != nil {
		return fmt.Errorf("invalid authorId: must be a valid UUID")
	}

	return nil
}

func (c *BidAuthorType) String() string {
	return string(*c)
}
